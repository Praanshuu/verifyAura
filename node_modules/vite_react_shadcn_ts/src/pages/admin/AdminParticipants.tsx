import { useState, useEffect } from "react";
import { SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar";
import { AdminSidebar } from "@/components/AdminSidebar";
import { ThemeToggle } from "@/components/ThemeToggle";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { getAllParticipants, ParticipantWithEvent } from "@/features/participants/api";
import { LoadingState } from "@/components/LoadingState";
import { Link } from "react-router-dom";
import { useAuth } from '@clerk/clerk-react';
import { useToast } from "@/components/ui/use-toast";
import { exportParticipantsToPDF } from "@/utils/pdfExport";
import { 
  Users, 
  Plus, 
  Search, 
  Mail, 
  Phone,
  Calendar,
  Award,
  Filter,
  Download,
  MoreHorizontal,
  RefreshCw
} from "lucide-react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { DataTable } from "@/components/DataTable";

const AdminParticipants = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [participants, setParticipants] = useState<ParticipantWithEvent[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [pagination, setPagination] = useState<{
    total: number;
    page: number;
    limit: number;
    totalPages: number;
    hasNext: boolean;
    hasPrev: boolean;
  } | null>(null);
  const { getToken } = useAuth();
  const { toast } = useToast();
  const participantsPerPage = 50;

  const fetchParticipants = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const token = await getToken();
      if (!token) {
        throw new Error('No authentication token available');
      }
      
      const response = await getAllParticipants(currentPage, participantsPerPage, token);
      console.log('[DEBUG] Participants response:', response.data);
      setParticipants(response.data || []);
      setPagination(response.pagination);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to fetch participants');
    } finally {
      setLoading(false);
    }
  };

  // Fetch participants when page changes
  useEffect(() => {
    fetchParticipants();
  }, [currentPage]);

  const getStatusBadge = (revoked: boolean) => {
    return revoked 
      ? "bg-red-500/10 text-red-600"
      : "bg-brand-green/10 text-brand-green";
  };

  const getInitials = (name: string) => {
    return name.split(' ').map(n => n[0]).join('').toUpperCase();
  };

  const filteredParticipants = participants.filter(participant =>
    participant.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    participant.email.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleRevoke = async (id: string) => {
    // First confirm the action
    if (!window.confirm('Are you sure you want to revoke this certificate?')) {
      return;
    }
    
    // Ask for optional reason
    const reason = window.prompt('Optional: Enter a reason for revocation (or leave blank)') || '';
    
    setIsProcessing(true);
    try {
      const token = await getToken();
      if (!token) {
        throw new Error('No authentication token available');
      }
      
      const { revokeCertificate } = await import('@/features/participants/api');
      await revokeCertificate(id, reason, token);
      
      // Update UI after successful API call
      setParticipants(prev => prev.map(p => p.id === id 
        ? { ...p, revoked: true, revoke_reason: reason || 'Revoked by admin', revoked_at: new Date().toISOString() }
        : p
      ));
      
      toast({
        title: "✅ Certificate Revoked",
        description: "The certificate has been successfully revoked.",
      });
    } catch (error) {
      console.error('Revoke error:', error);
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to revoke certificate",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
    }
  };

  const handleRestore = async (id: string) => {
    // Confirm the action
    if (!window.confirm('Are you sure you want to restore this certificate?')) {
      return;
    }
    
    setIsProcessing(true);
    try {
      const token = await getToken();
      if (!token) {
        throw new Error('No authentication token available');
      }
      
      const { restoreCertificate } = await import('@/features/participants/api');
      await restoreCertificate(id, token);
      
      // Update UI after successful API call
      setParticipants(prev => prev.map(p => p.id === id 
        ? { ...p, revoked: false, revoke_reason: null, revoked_at: null }
        : p
      ));
      
      toast({
        title: "✅ Certificate Restored",
        description: "The certificate has been successfully restored.",
      });
    } catch (error) {
      console.error('Restore error:', error);
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to restore certificate",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
    }
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const handleExportPDF = () => {
    try {
      // Export current page participants
      exportParticipantsToPDF(filteredParticipants);
      toast({
        title: "✅ Export Successful",
        description: "Participants data has been exported to PDF.",
      });
    } catch (error) {
      console.error('Export error:', error);
      toast({
        title: "Error",
        description: "Failed to export PDF. Please try again.",
        variant: "destructive",
      });
    }
  };

  return (
    <SidebarProvider>
      <div className="min-h-screen flex w-full bg-gradient-to-br from-background via-background to-muted/20">
        <AdminSidebar />
        
        <div className="flex-1 flex flex-col">
          {/* Header */}
          <header className="h-16 border-b bg-background/80 backdrop-blur-md sticky top-0 z-40">
            <div className="flex items-center justify-between px-6 h-full">
              <div className="flex items-center space-x-4">
                <SidebarTrigger className="h-10 w-10" />
                <div>
                  <h1 className="text-xl font-bold text-foreground">Participants Management</h1>
                  <p className="text-sm text-muted-foreground">Manage learners and their progress</p>
                </div>
              </div>
              
              <div className="flex items-center space-x-3">
                <Button 
                  variant="outline" 
                  size="sm" 
                  className="rounded-xl"
                  onClick={fetchParticipants}
                  disabled={loading}
                >
                  <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
                  Refresh
                </Button>
                <Button 
                  variant="outline" 
                  size="sm" 
                  className="rounded-xl"
                  onClick={handleExportPDF}
                  disabled={loading || filteredParticipants.length === 0}
                >
                  <Download className="h-4 w-4 mr-2" />
                  Export PDF
                </Button>
                <Button className="rounded-xl bg-gradient-to-r from-brand-green to-brand-navy" asChild>
                  <Link to="/admin/events">
                    <Plus className="h-4 w-4 mr-2" />
                    Add Participant
                  </Link>
                </Button>
                <ThemeToggle />
              </div>
            </div>
          </header>
          
          {/* Main Content */}
          <main className="flex-1 p-6">
            {/* Stats Cards */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
              <Card className="glassmorphic dark:glassmorphic-dark border-0 shadow-md">
                <CardHeader className="pb-2">
                  <div className="flex items-center justify-between">
                    <div className="p-2 rounded-xl bg-brand-green/10">
                      <Users className="h-5 w-5 text-brand-green" />
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-foreground mb-1">
                    {pagination?.total || participants.length}
                  </div>
                  <p className="text-sm text-muted-foreground">Total Participants</p>
                </CardContent>
              </Card>
              
              <Card className="glassmorphic dark:glassmorphic-dark border-0 shadow-md">
                <CardHeader className="pb-2">
                  <div className="flex items-center justify-between">
                    <div className="p-2 rounded-xl bg-blue-500/10">
                      <Award className="h-5 w-5 text-blue-600" />
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-foreground mb-1">
                    {participants.filter(p => !p.revoked).length}
                  </div>
                  <p className="text-sm text-muted-foreground">Active Certificates</p>
                </CardContent>
              </Card>
              
              <Card className="glassmorphic dark:glassmorphic-dark border-0 shadow-md">
                <CardHeader className="pb-2">
                  <div className="flex items-center justify-between">
                    <div className="p-2 rounded-xl bg-orange-500/10">
                      <Calendar className="h-5 w-5 text-orange-600" />
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-foreground mb-1">
                    {participants.filter(p => !p.revoked).length}
                  </div>
                  <p className="text-sm text-muted-foreground">Active Learners</p>
                </CardContent>
              </Card>
              
              <Card className="glassmorphic dark:glassmorphic-dark border-0 shadow-md">
                <CardHeader className="pb-2">
                  <div className="flex items-center justify-between">
                    <div className="p-2 rounded-xl bg-red-500/10">
                      <Users className="h-5 w-5 text-red-600" />
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-foreground mb-1">
                    {participants.filter(p => p.revoked).length}
                  </div>
                  <p className="text-sm text-muted-foreground">Revoked Certificates</p>
                </CardContent>
              </Card>
            </div>

            {/* Filters and Search */}
            <div className="flex flex-col sm:flex-row gap-4 mb-6">
              <div className="relative flex-1">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search participants..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 rounded-xl"
                />
              </div>
              <Button variant="outline" className="rounded-xl">
                <Filter className="h-4 w-4 mr-2" />
                Filter
              </Button>
            </div>

            {/* Participants Table */}
            {loading ? (
              <LoadingState />
            ) : error ? (
              <div className="text-center py-8">
                <p className="text-red-600 mb-4">{error}</p>
                <Button onClick={fetchParticipants} variant="outline">
                  Try Again
                </Button>
              </div>
            ) : (
              <>
                <Card className="glassmorphic dark:glassmorphic-dark border-0 shadow-lg">
                  <CardHeader>
                    <CardTitle>Participants List</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <DataTable
                      columns={[
                        "Participant",
                        "Contact",
                        "Event",
                        "Certificate ID",
                        "Status",
                        "Created Date",
                        "",
                      ]}
                      rows={filteredParticipants}
                      renderRow={(participant) => (
                    <TableRow key={participant.id}>
                      <TableCell>
                        <div className="flex items-center space-x-3">
                          <Avatar className="h-10 w-10">
                            <AvatarImage src="" />
                            <AvatarFallback className="bg-brand-green/10 text-brand-green">
                              {getInitials(participant.name)}
                            </AvatarFallback>
                          </Avatar>
                          <div className="font-medium">{participant.name}</div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="space-y-1 text-sm">
                          <div className="flex items-center space-x-2">
                            <Mail className="h-3 w-3 text-muted-foreground" />
                            <span>{participant.email}</span>
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div 
                          className="font-medium text-foreground truncate max-w-[200px]" 
                          title={participant.event_name}
                        >
                          {participant.event_name || 'N/A'}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="font-mono text-sm">{participant.certificate_id}</div>
                      </TableCell>
                      <TableCell>
                        <Badge className={getStatusBadge(participant.revoked)}>
                          {participant.revoked ? "Revoked" : "Active"}
                        </Badge>
                      </TableCell>
                      <TableCell>{new Date(participant.created_at).toLocaleDateString()}</TableCell>
                      <TableCell>
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                              <MoreHorizontal className="h-4 w-4" />
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                            <DropdownMenuItem>View Profile</DropdownMenuItem>
                            <DropdownMenuItem>Send Message</DropdownMenuItem>
                            <DropdownMenuItem 
                              onClick={() => participant.revoked ? handleRestore(participant.id) : handleRevoke(participant.id)}
                              disabled={isProcessing}
                              className={participant.revoked ? "text-brand-green" : "text-destructive"}
                            >
                              {participant.revoked ? "Restore Certificate" : "Revoke Certificate"}
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </TableCell>
                        </TableRow>
                      )}
                    />
                  </CardContent>
                </Card>

                {/* Pagination */}
                {pagination && pagination.totalPages > 1 && (
                  <div className="flex flex-col sm:flex-row items-center justify-between gap-4 mt-6">
                    <div className="text-sm text-muted-foreground">
                      Showing {((currentPage - 1) * participantsPerPage) + 1} to {Math.min(currentPage * participantsPerPage, pagination.total)} of {pagination.total} participants
                    </div>
                    <div className="flex items-center space-x-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handlePageChange(currentPage - 1)}
                        disabled={!pagination.hasPrev || loading}
                        className="rounded-xl"
                      >
                        Previous
                      </Button>
                      
                      <div className="flex items-center space-x-1">
                        {Array.from({ length: Math.min(5, pagination.totalPages) }, (_, i) => {
                          let pageNum;
                          if (pagination.totalPages <= 5) {
                            pageNum = i + 1;
                          } else if (currentPage <= 3) {
                            pageNum = i + 1;
                          } else if (currentPage >= pagination.totalPages - 2) {
                            pageNum = pagination.totalPages - 4 + i;
                          } else {
                            pageNum = currentPage - 2 + i;
                          }
                          
                          return (
                            <Button
                              key={pageNum}
                              variant={currentPage === pageNum ? "default" : "outline"}
                              size="sm"
                              onClick={() => handlePageChange(pageNum)}
                              disabled={loading}
                              className="rounded-xl w-10"
                            >
                              {pageNum}
                            </Button>
                          );
                        })}
                      </div>
                      
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handlePageChange(currentPage + 1)}
                        disabled={!pagination.hasNext || loading}
                        className="rounded-xl"
                      >
                        Next
                      </Button>
                    </div>
                  </div>
                )}
              </>
            )}
          </main>
        </div>
      </div>
    </SidebarProvider>
  );
};

export default AdminParticipants;