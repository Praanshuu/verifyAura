// frontend/src/features/participants/api.ts
import { apiFetch, toQueryString } from '@/lib/api';

export interface Participant {
  id: string;
  event_id: string;
  name: string;
  email: string;
  certificate_id: string;
  revoked: boolean;
  revoke_reason?: string;
  created_at: string;
  revoked_at?: string;
}

export interface ParticipantWithEvent extends Participant {
  event_name: string;
  event_code: string;
}

export interface ParticipantsResponse {
  data: ParticipantWithEvent[];
  pagination: {
    total: number;
    page: number;
    limit: number;
    totalPages: number;
    hasNext: boolean;
    hasPrev: boolean;
  };
}

export async function getParticipantsByEvent(
  eventId: string,
  page: number = 1,
  limit: number = 10,
  token?: string
): Promise<ParticipantsResponse> {
  const qs = toQueryString({ event_id: eventId, page, limit });
  return apiFetch(`/api/admin/participants${qs}`, {}, token);
}

export async function getAllParticipants(
  page: number = 1,
  limit: number = 10,
  token?: string
): Promise<ParticipantsResponse> {
  const qs = toQueryString({ page, limit });
  return apiFetch(`/api/admin/participants${qs}`, {}, token);
}

export function getParticipantById(participantId: string, token?: string): Promise<ParticipantWithEvent> {
  return apiFetch(`/api/admin/participants/${participantId}`, {}, token);
}

export function createParticipant(
  participantData: Omit<Participant, 'id' | 'created_at'>,
  token?: string
): Promise<Participant> {
  // Only send required fields
  const payload: {
    event_id: string;
    name: string;
    email: string;
    certificate_id?: string;
  } = {
    event_id: participantData.event_id,
    name: participantData.name,
    email: participantData.email,
  };
  if (participantData.certificate_id) {
    payload.certificate_id = participantData.certificate_id;
  }
  return apiFetch('/api/admin/participants', { 
    method: 'POST', 
    body: JSON.stringify(payload) 
  }, token);
}

export function updateParticipant(participantId: string, updates: Partial<Participant>, token?: string): Promise<Participant> {
  return apiFetch(`/api/admin/participants/${participantId}`, { 
    method: 'PUT', 
    body: JSON.stringify(updates) 
  }, token);
}

export function revokeCertificate(participantId: string, reason: string, token?: string): Promise<Participant> {
  return apiFetch(`/api/admin/participants/${participantId}/revoke`, { 
    method: 'PATCH', 
    body: JSON.stringify({ revoke: true, reason: reason || '' }) 
  }, token);
}

export function restoreCertificate(participantId: string, token?: string): Promise<Participant> {
  return apiFetch(`/api/admin/participants/${participantId}/revoke`, { 
    method: 'PATCH', 
    body: JSON.stringify({ revoke: false }) 
  }, token);
}

export function deleteParticipant(participantId: string, token?: string): Promise<void> {
  return apiFetch(`/api/admin/participants/${participantId}`, { 
    method: 'DELETE' 
  }, token);
}