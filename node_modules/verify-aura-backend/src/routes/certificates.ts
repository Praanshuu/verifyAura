// backend/src/routes/certificates.ts
import express from 'express';
import Joi from 'joi';
import { supabase, cachedQuery } from '../services/supabaseOptimized';
import { requireAdminOptimized as requireAdmin } from '../middleware/clerkAuthOptimized';
import { generateCertificateId } from '../utils/generateCertificateId';

const router = express.Router();

const verifySchema = Joi.object({
  certificateId: Joi.string().required(),
});

const generateSchema = Joi.object({
  name: Joi.string().required(),
  email: Joi.string().email().required(),
});

/**
 * POST /api/certificates/verify
 * Body: { certificateId }
 */
router.post('/verify', async (req, res) => {
  const { error: vErr } = verifySchema.validate(req.body);
  if (vErr) return res.status(400).json({ error: vErr.message });

  const { certificateId } = req.body;

  try {
    // First, let's check if we can search by email (if certificateId is an email)
    let query;
    const isEmail = certificateId.includes('@');
    
    if (isEmail) {
      // Search by email - get the most recent certificate for this email
      query = supabase
        .from('participants')
        .select(`
          id, 
          name, 
          email, 
          certificate_id,
          revoked, 
          revoke_reason, 
          revoked_at, 
          created_at,
          events:event_id (
            event_name,
            event_code,
            date,
            description,
            tag
          )
        `)
        .eq('email', certificateId)
        .order('created_at', { ascending: false })
        .limit(1)
        .single();
    } else {
      // Search by certificate_id
      query = supabase
        .from('participants')
        .select(`
          id, 
          name, 
          email, 
          certificate_id,
          revoked, 
          revoke_reason, 
          revoked_at, 
          created_at,
          events:event_id (
            event_name,
            event_code,
            date,
            description,
            tag
          )
        `)
        .eq('certificate_id', certificateId)
        .single();
    }

    const { data, error } = await query;

    if (error) {
      console.error('Error fetching participant:', error);
      return res.json({ valid: false, error: error.message });
    }

    if (!data) {
      return res.json({ valid: false, message: 'No certificate found' });
    }

    // Transform the data to flatten event information
    // events is a foreign key relation, so it returns an object (not an array)
    const eventData = data.events as any;
    const participant = {
      name: data.name,
      email: data.email,
      certificate_id: data.certificate_id,
      event_name: eventData?.event_name || '',
      event_code: eventData?.event_code || '',
      event_description: eventData?.description || '',
      event_date: eventData?.date || '',
      event_tag: eventData?.tag || '',
      created_at: data.created_at,
      is_active: !data.revoked,
      revoked: data.revoked,
      revoke_reason: data.revoke_reason,
      revoked_at: data.revoked_at
    };

    return res.json({
      valid: !data.revoked,
      participant
    });
  } catch (error) {
    console.error('Certificate verification error:', error);
    return res.status(500).json({ 
      valid: false, 
      error: 'Internal server error during verification' 
    });
  }
});

/**
 * POST /api/certificates/generate
 * Admin only - create a new certificate id for a user (without inserting into participants table)
 */
router.post('/generate', requireAdmin, async (req, res) => {
  const { error: vErr } = generateSchema.validate(req.body);
  if (vErr) return res.status(400).json({ error: vErr.message });

  const { name, email } = req.body;
  const certificateId = generateCertificateId(name, email);

  // Optionally ensure uniqueness (very unlikely collision) - check DB
  const { data: exists } = await supabase.from('participants').select('id').eq('certificate_id', certificateId).limit(1);
  if (exists && exists.length > 0) {
    // if collision, regenerate with stronger randomness
    const regenerated = `${certificateId}-${Date.now().toString().slice(-4)}`;
    return res.json({ certificateId: regenerated, note: 'regenerated due to collision' });
  }

  return res.json({ certificateId });
});

/**
 * GET /api/certificates/health
 */
router.get('/health', (_req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

/**
 * GET /api/certificates/test
 * Test endpoint to verify database connection and schema
 */
router.get('/test', async (_req, res) => {
  try {
    // Test 1: Check if we can connect to participants table
    const { data: participantCount, error: pError } = await supabase
      .from('participants')
      .select('id', { count: 'exact', head: true });
    
    // Test 2: Check if we can connect to events table
    const { data: eventCount, error: eError } = await supabase
      .from('events')
      .select('id', { count: 'exact', head: true });
    
    // Test 3: Get a sample participant with event to verify join works
    const { data: sampleParticipant, error: sError } = await supabase
      .from('participants')
      .select(`
        certificate_id,
        name,
        email,
        events:event_id (
          event_name,
          event_code,
          date,
          tag
        )
      `)
      .limit(1)
      .single();

    return res.json({
      status: 'ok',
      database: {
        connected: !pError && !eError,
        participants: {
          error: pError?.message || null,
          count: participantCount || 0
        },
        events: {
          error: eError?.message || null,
          count: eventCount || 0
        },
        sampleJoin: {
          error: sError?.message || null,
          data: sampleParticipant || null
        }
      },
      timestamp: new Date().toISOString()
    });
  } catch (error: any) {
    return res.status(500).json({
      status: 'error',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

export default router;
